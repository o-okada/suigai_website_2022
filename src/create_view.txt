psql -U frics -d suigai_web -h localhost

###############################################################################
### このビュー表の目的、役割分担
### ※逆計算画面用である。
### ※調査員調査表の１行＝DBの１レコードとする。
### (1)コード値からコード名を参照するための外部結合を行う。
### (-)県別家庭用品所有額等、コード値から所有額などを参照するための外部結合を行わない。
### ※ビュー表をview.pyで検索する時に結合する。
### (2)延床面積、被災世帯数、被災事業所数の按分を行う。
### (3)延床面積、被災世帯数、被災事業所数、農漁家戸数、事業所従業者数の合計値を計算する。
### (-)資産額、損失額を参照するための、単純な結合（１行である場合のみ成り立つ、２行なら２倍のレコード）は行わない。
### ※単純な結合であれば、別の表は別の表として検索すれば良い（ただの定数のイメージ）。
### (-)浸水土砂区分コード、地盤勾配コードから浸水土砂ごと、地盤勾配ごとの被害率を参照するための外部結合は行わない。
### ※上記の項目は、ビュー表としては、ブラックボックス化しすぎであり、詰め込みすぎであるためである。
### ※浸水土砂ごと、地盤勾配ごとの被害率は、ｈｔｍｌのレンダリング時に条件分岐で明示的に行う。
### (-)集計DBとの外部結合は行わない。
### (-)逆計算は行わない。
### ※上記の項目は、ビュー表としては、ブラックボックス化しすぎであり、詰め込みすぎであるためである。
### ※ビュー表をview.pyで検索する時に結合、逆計算する。
###############################################################################
CREATE VIEW ippan_view AS 
SELECT 
    SUB1.ippan_id AS ippan_id, 
    SUB1.ippan_name AS ippan_name, 
    SUB1.suigai_id AS suigai_id, 
    SUB1.suigai_name AS suigai_name, 
    SUB1.ken_code AS ken_code, 
    SUB1.ken_name AS ken_name, 
    SUB1.city_code AS city_code, 
    SUB1.city_name AS city_name, 
    SUB1.begin_date AS begin_date, 
    SUB1.end_date AS end_date, 
    SUB1.cause_1_code AS cause_1_code, 
    SUB1.cause_1_name AS cause_1_name, 
    SUB1.cause_2_code AS cause_2_code, 
    SUB1.cause_2_name AS cause_2_name, 
    SUB1.cause_3_code AS cause_3_code, 
    SUB1.cause_3_name AS cause_3_name, 
    SUB1.area_id AS area_id, 
    SUB1.area_name AS area_name, 
    
    SUB1.suikei_code AS suikei_code, 
    SUB1.suikei_name AS suikei_name, 
    SUB1.suikei_type_code AS suikei_type_code, 
    SUB1.suikei_type_name AS suikei_type_name, 
    SUB1.kasen_code AS kasen_code, 
    SUB1.kasen_name AS kasen_name, 
    SUB1.kasen_type_code AS kasen_type_code, 
    SUB1.kasen_type_name AS kasen_type_name, 
    SUB1.gradient_code AS gradient_code, 
    SUB1.gradient_name AS gradient_name, 
    
    SUB1.residential_area AS residential_area, 
    SUB1.agricultural_area AS agricultural_area, 
    SUB1.underground_area AS underground_area, 
    SUB1.kasen_kaigan_code AS kasen_kaigan_code, 
    SUB1.kasen_kaigan_name AS kasen_kaigan_name, 
    SUB1.crop_damage AS crop_damage, 
    SUB1.weather_id AS weather_id, 
    SUB1.weather_name AS weather_name, 
    
    SUB1.building_code AS building_code, 
    SUB1.building_name AS building_name, 
    SUB1.underground_code AS underground_code, 
    SUB1.underground_name AS underground_name, 
    SUB1.flood_sediment_code AS flood_sediment_code, 
    SUB1.flood_sediment_name AS flood_sediment_name, 
    SUB1.building_lv00 AS building_lv00, 
    SUB1.building_lv01_49 AS building_lv01_49, 
    SUB1.building_lv50_99 AS building_lv50_99, 
    SUB1.building_lv100 AS building_lv100, 
    SUB1.building_half AS building_half, 
    SUB1.building_full AS building_full, 
    SUB1.building_total AS building_total, 
    SUB1.floor_area AS floor_area, 
    SUB1.family AS family, 
    SUB1.office AS office, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.floor_area * SUB1.building_lv00 / SUB1.building_total) END AS floor_area_lv00, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.floor_area * SUB1.building_lv01_49 / SUB1.building_total) END AS floor_area_lv01_49, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.floor_area * SUB1.building_lv50_99 / SUB1.building_total) END AS floor_area_lv50_99, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.floor_area * SUB1.building_lv100 / SUB1.building_total) END AS floor_area_lv100, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.floor_area * SUB1.building_half / SUB1.building_total) END AS floor_area_half, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.floor_area * SUB1.building_full / SUB1.building_total) END AS floor_area_full, 
    SUB1.floor_area_total AS floor_area_total, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.family * SUB1.building_lv00 / SUB1.building_total) END AS family_lv00, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.family * SUB1.building_lv01_49 / SUB1.building_total) END AS family_lv01_49, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.family * SUB1.building_lv50_99 / SUB1.building_total) END AS family_lv50_99, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.family * SUB1.building_lv100 / SUB1.building_total) END AS family_lv100, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.family * SUB1.building_half / SUB1.building_total) END AS family_half, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.family * SUB1.building_full / SUB1.building_total) END AS family_full, 
    SUB1.family_total AS family_total, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.office * SUB1.building_lv00 / SUB1.building_total) END AS office_lv00, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.office * SUB1.building_lv01_49 / SUB1.building_total) END AS office_lv01_49, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.office * SUB1.building_lv50_99 / SUB1.building_total) END AS office_lv50_99, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.office * SUB1.building_lv100 / SUB1.building_total) END AS office_lv100, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.office * SUB1.building_half / SUB1.building_total) END AS office_half, 
    CASE WHEN (SUB1.building_total) <= 0 THEN NULL ELSE (SUB1.office * SUB1.building_full / SUB1.building_total) END AS office_full, 
    SUB1.office_total AS office_total, 
    SUB1.farmer_fisher_lv00 AS farmer_fisher_lv00, 
    SUB1.farmer_fisher_lv01_49 AS farmer_fisher_lv01_49, 
    SUB1.farmer_fisher_lv50_99 AS farmer_fisher_lv50_99, 
    SUB1.farmer_fisher_lv100 AS farmer_fisher_lv100, 
    SUB1.farmer_fisher_full AS farmer_fisher_full, 
    SUB1.farmer_fisher_total AS farmer_fisher_total, 
    SUB1.employee_lv00 AS employee_lv00, 
    SUB1.employee_lv01_49 AS employee_lv01_49, 
    SUB1.employee_lv50_99 AS employee_lv50_99, 
    SUB1.employee_lv100 AS employee_lv100, 
    SUB1.employee_full AS employee_full, 
    SUB1.employee_total AS employee_total, 
    SUB1.industry_code AS industry_code, 
    SUB1.industry_name AS industry_name, 
    SUB1.usage_code AS usage_code, 
    SUB1.usage_name AS usage_name, 
    SUB1.comment AS comment 
FROM 
(
    SELECT 
        IP1.ippan_id AS ippan_id, 
        IP1.ippan_name AS ippan_name, 
        IP1.suigai_id AS suigai_id, 
        SG1.suigai_name AS suigai_name, 
        SG1.ken_code AS ken_code, 
        KE1.ken_name AS ken_name, 
        SG1.city_code AS city_code, 
        CI1.city_name AS city_name, 
        SG1.begin_date AS begin_date, 
        SG1.end_date AS end_date, 
        SG1.cause_1_code AS cause_1_code, 
        CA1.cause_name AS cause_1_name, 
        SG1.cause_2_code AS cause_2_code, 
        CA2.cause_name AS cause_2_name, 
        SG1.cause_3_code AS cause_3_code, 
        CA3.cause_name AS cause_3_name, 
        SG1.area_id AS area_id, 
        AR1.area_name AS area_name, 
        
        SG1.suikei_code AS suikei_code, 
        SK1.suikei_name AS suikei_name, 
        SK1.suikei_type_code AS suikei_type_code, 
        ST1.suikei_type_name AS suikei_type_name, 
        SG1.kasen_code AS kasen_code, 
        KA1.kasen_name AS kasen_name, 
        KA1.kasen_type_code AS kasen_type_code, 
        KT1.kasen_type_name AS kasen_type_name, 
        SG1.gradient_code AS gradient_code, 
        GR1.gradient_name AS gradient_name, 
        
        SG1.residential_area AS residential_area, 
        SG1.agricultural_area AS agricultural_area, 
        SG1.underground_area AS underground_area, 
        SG1.kasen_kaigan_code AS kasen_kaigan_code, 
        KKA1.kasen_kaigan_name AS kasen_kaigan_name, 
        SG1.crop_damage AS crop_damage, 
        SG1.weather_id AS weather_id, 
        WE1.weather_name AS weather_name, 
        
        IP1.building_code AS building_code, 
        BD1.building_name AS building_name, 
        IP1.underground_code AS underground_code, 
        UD1.underground_name AS underground_name, 
        IP1.flood_sediment_code AS flood_sediment_code, 
        FL1.flood_sediment_name AS flood_sediment_name, 
        IP1.building_lv00 AS building_lv00, 
        IP1.building_lv01_49 AS building_lv01_49, 
        IP1.building_lv50_99 AS building_lv50_99, 
        IP1.building_lv100 AS building_lv100, 
        IP1.building_half AS building_half, 
        IP1.building_full AS building_full, 
        (IP1.building_lv00+IP1.building_lv01_49+IP1.building_lv50_99+IP1.building_lv100+IP1.building_half+IP1.building_full) AS building_total, 
        IP1.floor_area AS floor_area, 
        IP1.family AS family, 
        IP1.office AS office, 
        IP1.floor_area AS floor_area_total, 
        IP1.family AS family_total, 
        IP1.office AS office_total, 
        IP1.farmer_fisher_lv00 AS farmer_fisher_lv00, 
        IP1.farmer_fisher_lv01_49 AS farmer_fisher_lv01_49, 
        IP1.farmer_fisher_lv50_99 AS farmer_fisher_lv50_99, 
        IP1.farmer_fisher_lv100 AS farmer_fisher_lv100, 
        IP1.farmer_fisher_full AS farmer_fisher_full, 
        (IP1.farmer_fisher_lv00+IP1.farmer_fisher_lv01_49+IP1.farmer_fisher_lv50_99+IP1.farmer_fisher_lv100+IP1.farmer_fisher_full) AS farmer_fisher_total, 
        IP1.employee_lv00 AS employee_lv00, 
        IP1.employee_lv01_49 AS employee_lv01_49, 
        IP1.employee_lv50_99 AS employee_lv50_99, 
        IP1.employee_lv100 AS employee_lv100, 
        IP1.employee_full AS employee_full, 
        (IP1.employee_lv00+IP1.employee_lv01_49+IP1.employee_lv50_99+IP1.employee_lv100+IP1.employee_full) AS employee_total, 
        IP1.industry_code AS industry_code, 
        IN1.industry_name AS industry_name, 
        IP1.usage_code AS usage_code, 
        US1.usage_name AS usage_name, 
        IP1.comment AS comment  
    FROM ippan IP1 
    LEFT JOIN SUIGAI SG1                ON IP1.suigai_id = SG1.suigai_id 
    LEFT JOIN KEN KE1                   ON SG1.ken_code = KE1.ken_code 
    LEFT JOIN CITY CI1                  ON SG1.city_code = CI1.city_code 
    LEFT JOIN CAUSE CA1                 ON SG1.cause_1_code = CA1.cause_code 
    LEFT JOIN CAUSE CA2                 ON SG1.cause_2_code = CA2.cause_code 
    LEFT JOIN CAUSE CA3                 ON SG1.cause_3_code = CA3.cause_code 
    LEFT JOIN AREA AR1                  ON SG1.area_id = AR1.area_id 

    LEFT JOIN SUIKEI SK1                ON SG1.suikei_code = SK1.suikei_code 
    LEFT JOIN SUIKEI_TYPE ST1           ON SK1.suikei_type_code = ST1.suikei_type_code 
    LEFT JOIN KASEN KA1                 ON SG1.kasen_code = KA1.kasen_code 
    LEFT JOIN KASEN_TYPE KT1            ON KA1.kasen_type_code = KT1.kasen_type_code 
    LEFT JOIN GRADIENT GR1              ON SG1.gradient_code = GR1.gradient_code 

    LEFT JOIN KASEN_KAIGAN KKA1         ON SG1.kasen_kaigan_code = KKA1.kasen_kaigan_code 
    LEFT JOIN WEATHER WE1               ON SG1.weather_id = WE1.weather_id 
    
    LEFT JOIN BUILDING BD1              ON IP1.building_code = BD1.building_code 
    LEFT JOIN UNDERGROUND UD1           ON IP1.underground_code = UD1.underground_code 
    LEFT JOIN FLOOD_SEDIMENT FL1        ON IP1.flood_sediment_code = FL1.flood_sediment_code 
    LEFT JOIN INDUSTRY IN1              ON IP1.industry_code = IN1.industry_code 
    LEFT JOIN USAGE US1                 ON IP1.usage_code = US1.usage_code 
    
    ORDER BY CAST(IP1.IPPAN_ID AS INTEGER)
) SUB1 
;

CREATE VIEW suikei_view AS 
SELECT 
    SK1.suikei_code AS suikei_code, 
    SK1.suikei_name AS suikei_name, 
    SK1.suikei_type_code AS suikei_type_code, 
    ST1.suikei_type_name AS suikei_type_name 
FROM SUIKEI SK1 
LEFT JOIN SUIKEI_TYPE ST1 ON SK1.suikei_type_code = ST1.suikei_type_code 
ORDER BY CAST(SK1.suikei_code AS INTEGER)
;

CREATE VIEW kasen_view AS 
SELECT 
    KA1.kasen_code AS kasen_code, 
    KA1.kasen_name AS kasen_name, 
    KA1.kasen_type_code AS kasen_type_code, 
    KT1.kasen_type_name AS kasen_type_name, 
    KA1.suikei_code AS suikei_code, 
    SK1.suikei_name AS suikei_name 
FROM KASEN KA1 
LEFT JOIN KASEN_TYPE KT1 ON KA1.kasen_type_code = KT1.kasen_type_code 
LEFT JOIN SUIKEI SK1 ON KA1.suikei_code = SK1.suikei_code 
ORDER BY CAST(KA1.kasen_code AS INTEGER)   
;

CREATE VIEW city_view AS 
SELECT 
    CT1.city_code AS city_code, 
    CT1.city_name AS city_name, 
    CT1.ken_code AS ken_code, 
    KE1.ken_name AS ken_name, 
    CT1.city_population AS city_population, 
    CT1.city_area AS city_area 
FROM CITY CT1 
LEFT JOIN KEN KE1 ON CT1.ken_code = KE1.ken_code 
ORDER BY CAST(CT1.city_code AS INTEGER)   
;

CREATE VIEW house_asset_view AS 
SELECT 
    HA1.house_asset_code AS house_asset_code, 
    HA1.ken_code AS ken_code, 
    KE1.ken_name AS ken_name, 
    HA1.house_asset AS house_asset 
FROM HOUSE_ASSET HA1 
LEFT JOIN KEN KE1 ON HA1.ken_code = KE1.ken_code 
ORDER BY CAST(HA1.house_asset_code AS INTEGER)   
;

CREATE VIEW house_rate_view AS 
SELECT 
    HA1.house_rate_code AS house_rate_code, 
    HA1.ken_code AS ken_code, 
    KE1.ken_name AS ken_name, 
    HA1.house_asset AS house_asset 
FROM HOUSE_RATE HR1 
LEFT JOIN KEN KE1 ON HA1.ken_code = KE1.ken_code 
ORDER BY CAST(HA1.house_asset_code AS INTEGER)   
;